/*
 *********************************************************************************
 * 
 * loader.ahk
 * 
 * all files are UTF-8 no BOM encoded
 * 
 * from https://www.autohotkey.com/board/topic/10384-download-progress-bar/
 * 
 * Copyright (c) 2022 jvr.de. All rights reserved.
 *
 * Licens -> Licenses.txt
 * 
 *********************************************************************************
*/

#NoEnv
#Warn
#SingleInstance force

SendMode Input
SetWorkingDir %A_ScriptDir%

fontDefault := "Calibri"
font := fontDefault

fontsizeDefault := 10
fontsize := fontsizeDefault

wrkDir := A_ScriptDir . "\"
configFile := wrkDir . "loader.ini"

appName := "Loader"
appnameLower := "loader"
extension := ".exe"
appVersion := "0.013"

bit := (A_PtrSize=8 ? "64" : "32")

if (!A_IsUnicode)
  bit := "A" . bit

app := appName . " " . appVersion . " " . bit . "-bit"

result := ""

CR := "`n"
CR2 := "`n`n"
quot := """"

consoleapp := 0
disableini := 0
debug := 0

javasourceurlDefault := "https://www.graalvm.org/downloads/index.html"
javasourceurl := javasourceurlDefault

executorDefault := "echo Hello world!"
executor := executorDefault
classpath := ""
mainclass := ""
parameter := ""
showresult := 0
showresulttime := 5000
selfTimeout := -20000

setTimer,exit,%selfTimeout%

hasParams := A_Args.Length()

if (hasParams > 0){
  Loop % hasParams
  {
    if(eq(StrLower(StrLower(A_Args[A_index])),"disableini")){
      disableini := 1
    }
  }
}
    
if (!disableini && FileExist(configFile))
  readIni()
  
if (hasParams > 0)
  readParams()

 if (!isJavaOk())
  installJava()
  
quot1 := quot
quot2 := quot

if (classpath == "")
  quot1 := ""
  
if (parameter == "")
  quot2 := ""

; runCmd := trim(comspec . A_Space . "/c" . A_Space . executor . A_Space . quot1 . classpath . quot1 . A_Space . mainclass . A_Space . quot2 . parameter  . quot2)

runCmd := trim(executor . A_Space . quot1 . classpath . quot1 . A_Space . mainclass . A_Space . quot2 . parameter  . quot2)

if (debug){
  tiptop(runCmd)
} 
  
result := doit(runCmd)

if (debug){
  clipboard := result
  tiptop(result)
  sleep, 5000
}

if (showresult){
  tiptop(result)
  sleep, %showresulttime%
}

if (consoleapp){
  clipboard := result
}

if (0 + result == 0)
  exitcode := 0
else
  exitcode := 1


exit(exitcode)

return

Escape::
exit(1)
;-------------------------------- readParams --------------------------------
readParams(){
  global hasParams
  global disableini
  global consoleapp
  global debug
  global showresult

  global executor
  global classpath
  global mainclass
  global parameter
  global showresulttime
  
 
  Loop % hasParams
  {
    if(eq(StrLower(StrLower(A_Args[A_index])),"consoleapp")){
      consoleapp := 1
    }
    if(eq(StrLower(StrLower(A_Args[A_index])),"debug")){
      debug := 1
    }
    if(eq(StrLower(StrLower(A_Args[A_index])),"showresult")){
      showresult := 1
    }
      
    ; parameter with arguments
    FoundPos := RegExMatch(A_Args[A_index],"Oi)--executor=(.*)", m)
    if(FoundPos > 0){
      executor := m.value(m.Count())
    }
    FoundPos := RegExMatch(A_Args[A_index],"Oi)--classpath=(.*)", m)
    if(FoundPos > 0){
      classpath := m.value(m.Count())
    }    
    FoundPos := RegExMatch(A_Args[A_index],"Oi)--mainclass=(.*)", m)
    if(FoundPos > 0){
      mainclass := m.value(m.Count())
    }   
    FoundPos := RegExMatch(A_Args[A_index],"Oi)--parameter=(.*)", m)
    if(FoundPos > 0){
      parameter := m.value(m.Count())
    }
    FoundPos := RegExMatch(A_Args[A_index],"Oi)--showresulttime=(.*)", m)
    if(FoundPos > 0){
      showresulttime := m.value(m.Count())
    }     
  }
    
  return
}

;----------------------------------- doit -----------------------------------
doit(theCmd){
  
  res := ""
  try {
    res := CmdRet(theCmd)
  } catch e {
    eMsg  := e.Message
    msgArr := {}
    msgArr.push("Error: " . eMsg)
    msgArr.push("Closing Loader due to an error!")
    
    errorExit(msgArr, theCmd)
  }
  
  return res
}

;--------------------------------- StrLower ---------------------------------
StrLower(s){
	r := ""
	StringLower, r, s
	
	return r
}

;---------------------------------- readIni ----------------------------------
readIni(){
  global executor
  global executorDefault
  global configFile
  global classpath
  global mainclass
  global parameter
  global javasourceurl
  global javasourceurlDefault
  global consoleapp
  global debug
  global showresult
  global showresulttime
  
  IniRead, executor, %configFile%, config, executor, executorDefault
  IniRead, classpath, %configFile%, config, classpath, %A_Space%
  IniRead, mainclass, %configFile%, config, mainclass, %A_Space%
  IniRead, parameter, %configFile%, config, parameter, %A_Space%
  IniRead, showresulttime, %configFile%, config, showresulttime, 5000

  IniRead, consoleapp, %configFile%, config, consoleapp, 0
  IniRead, debug, %configFile%, config, debug, 0
  IniRead, showresult, %configFile%, config, showresult, 0
  
  IniRead, javasourceurl, %configFile%, config, javasourceurl, javasourceurlDefault
  
  
  return
}

;------------------------------------ eq ------------------------------------
eq(a, b) {
  if (InStr(a, b) && InStr(b, a))
    return 1
  return 0
}

;--------------------------------- errorExit ---------------------------------
errorExit(theMsgArr,clp := "") {
  global CR
  global result
 
  msgComplete := ""
  for index, element in theMsgArr
  {
    msgComplete .= element . CR
  }

  msgbox,48,ERROR,%msgComplete%
  if (clp != "")
    clipboard := clp
  
  result := msgComplete
  exit(1)
  
  return
}

;---------------------------------- CmdRet ----------------------------------
CmdRet(sCmd, callBackFuncObj := "", encoding := "CP0") {
   static HANDLE_FLAG_INHERIT := 0x00000001, flags := HANDLE_FLAG_INHERIT
        , STARTF_USESTDHANDLES := 0x100, CREATE_NO_WINDOW := 0x08000000 , hPipeRead := "", hPipeWrite := "", sOutput := ""
   
   DllCall("CreatePipe", "PtrP", hPipeRead, "PtrP", hPipeWrite, "Ptr", 0, "UInt", 0)
   DllCall("SetHandleInformation", "Ptr", hPipeWrite, "UInt", flags, "UInt", HANDLE_FLAG_INHERIT)
   
   VarSetCapacity(STARTUPINFO , siSize :=    A_PtrSize*4 + 4*8 + A_PtrSize*5, 0)
   NumPut(siSize              , STARTUPINFO)
   NumPut(STARTF_USESTDHANDLES, STARTUPINFO, A_PtrSize*4 + 4*7)
   NumPut(hPipeWrite          , STARTUPINFO, A_PtrSize*4 + 4*8 + A_PtrSize*3)
   NumPut(hPipeWrite          , STARTUPINFO, A_PtrSize*4 + 4*8 + A_PtrSize*4)
   
   VarSetCapacity(PROCESS_INFORMATION, A_PtrSize*2 + 4*2, 0)

   if !DllCall("CreateProcess", "Ptr", 0, "Str", sCmd, "Ptr", 0, "Ptr", 0, "UInt", true, "UInt", CREATE_NO_WINDOW
                              , "Ptr", 0, "Ptr", 0, "Ptr", &STARTUPINFO, "Ptr", &PROCESS_INFORMATION)
   {
      DllCall("CloseHandle", "Ptr", hPipeRead)
      DllCall("CloseHandle", "Ptr", hPipeWrite)
      throw Exception("CreateProcess is failed")
   }
   DllCall("CloseHandle", "Ptr", hPipeWrite)
   VarSetCapacity(sTemp, 4096), nSize := 0
   while DllCall("ReadFile", "Ptr", hPipeRead, "Ptr", &sTemp, "UInt", 4096, "UIntP", nSize, "UInt", 0) {
      sOutput .= stdOut := StrGet(&sTemp, nSize, encoding)
      ( callBackFuncObj && callBackFuncObj.Call(stdOut) )
   }
   DllCall("CloseHandle", "Ptr", NumGet(PROCESS_INFORMATION))
   DllCall("CloseHandle", "Ptr", NumGet(PROCESS_INFORMATION, A_PtrSize))
   DllCall("CloseHandle", "Ptr", hPipeRead)
   Return sOutput
}

;--------------------------------- isOkJava ---------------------------------
isJavaOk(){
  global debug
  
  ret := false

  try {
    javaCheckResult := CmdRet("java -version")
    javaFoundPos := RegExMatch(javaCheckResult,"O)version(.*)", mJava)
    if(javaFoundPos > 0){
      a := mJava.value(mJava.Count())
      if (debug){
        tiptop("Found Java version: " . a)
      }
        
      ret := true
    }
  } catch e {
    eMsg  := e.Message
    msgArr := {}
    msgArr.push("Error: " . eMsg)
    msgArr.push("Closing Loader due to an error!")
    
    errorExit(msgArr,eMsg)
  }

  return ret
}

;-------------------------------- installJava --------------------------------
installJava(){
  global javasourceurl
  global CR
  global CR2
  
  msgLines := {}
  msgLines.push("No suitable Java runtime found, please install Java first!" . CR)
  msgLines.push("Closing Loader and opening your browser" . CR)
  msgLines.push("with a suitable Java-download webpage now!" . CR)
  msgLines.push("(Current Java selection: GraalVM.)" . CR2)
  msgLines.push("Look for the latest Java installation-package, like:  graalvm-ce-java11-windows-amd64-22.x.y.z.zip")
  msgLines.push("Follow the docs and install Java!" . CR)
  
  msgComplete := ""
  for index, element in msgLines
  {
    msgComplete .= element . CR
  }
  
  msgbox,48,STOP,%msgComplete%
  
  ; a temporary file, running directory must be writeable
  outputFile := "webpageloader_$$$$$$.html"

if (FileExist(outputFile))
  FileDelete, %outputFile%

  FileAppend,
(
<html>
  <body>
    <script>
      document.location.href="
),%outputFile%

  FileAppend,%javasourceurl%,%outputFile%

  FileAppend,
(
"
    </script>
  </body>
</html>
),%outputFile%

  run, %comspec% /c %outputFile%

  sleep,5000

  ; remove temporary file
  if (FileExist(outputFile))
      FileDelete, %outputFile%

  exit()
  
  return
}

;---------------------------------- tipTop ----------------------------------
tipTop(msg, n := 1){

  s := StrReplace(msg,"^",",")
  
  toolX := Floor(A_ScreenWidth / 2)
  toolY := 2

  CoordMode,ToolTip,Screen
  ToolTip,%s%, toolX, toolY, n
  
  WinGetPos, X,Y,W,H, ahk_class tooltips_class32

  toolX := (A_ScreenWidth / 2) - W / 2
  
  ToolTip,%s%, toolX, toolY, n
  
  return
}

;----------------------------------- Beep -----------------------------------
Beep(Freq, Duration) {
; example: Beep(750, 300)

    if !(DllCall("kernel32.dll\Beep", "UInt", Freq, "UInt", Duration))
        return DllCall("kernel32.dll\GetLastError")
    return 1
}

;----------------------------------- exit -----------------------------------
exit(exitCode := 1) {
    
  setTimer,exit,delete

  exitApp, exitCode
  
  return
}




